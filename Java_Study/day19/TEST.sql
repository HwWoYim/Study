--연동해놓은 New Oracle 커넥션과
----해당 .sql페이지를 연결
--
---- SQL : 라인 by 라인 / 인터프리터 언어 / 채팅형 언어
---- DDL, DML, DCL
---- DDL
---- 학생부,자판기,...
---- ArrayList<VO>
---- 테이블 => VO
---- 정보들을 저장한 DB
---- CREATE, DROP, ALTER
---- 설계를 완벽하게 진행한 뒤에, 테이블을 생성
---- 같은 이름을 가진 테이블은 생성xxx
CREATE TABLE STUDENT(
   --멤버변수명(칼럼)  자료형  제약조건
   NUM INT PRIMARY KEY,
   NAME VARCHAR(20) NOT NULL,
   AGE INT NOT NULL,
   SCORE INT DEFAULT 0,
   PHONE VARCHAR(20) NOT NULL UNIQUE
);
--DROP TABLE STUDENT;
-- DML
-- INSERT, SELECT, UPDATE, DELETE
-- INSERT INTO 테이블명 (칼럼명,칼럼명,...) VALUES(값,값,...)
INSERT INTO STUDENT (NUM,NAME,AGE,SCORE,PHONE) VALUES(1,'아무무',20,80,'010-1234-1234');
INSERT INTO STUDENT (NUM,NAME,AGE,PHONE) VALUES(2,'아리',20,'010-1234-5678');
INSERT INTO STUDENT VALUES(3,'오리아나',22,45,'010-6677-8899');
INSERT INTO STUDENT VALUES((SELECT NVL(MAX(NUM),0)+1 FROM STUDENT),'모르가나',22,0,'010-9876-5432');
INSERT INTO STUDENT VALUES((SELECT NVL(MAX(NUM),0)+1 FROM STUDENT),'티모',24,95,'010-1111-4545');
SELECT * FROM STUDENT;
---- 서브쿼리
---- NVL(A,B)
----  : A값이 NULL이면 B값으로 취급하세요.
----  -> NVL(MAX(NUM),0)
---- SELECT 칼럼명,칼럼명 FROM 테이블명
SELECT NUM,NAME,AGE,SCORE,PHONE FROM STUDENT;
SELECT NUM,NAME FROM STUDENT;
SELECT * FROM STUDENT;
---- 조건절 WHERE
--SELECT * FROM STUDENT WHERE NUM>=3;
---- 출력 결과 컬럼에게 별칭 AS : 컬럼 별칭
--SELECT NUM,NAME,SCORE*100 AS GRADE FROM STUDENT;
--SELECT NUM,NAME,SCORE*100 AS 등급 FROM STUDENT;
--SELECT NUM,NAME,SCORE*100 AS "등 급" FROM STUDENT;
--SELECT NUM,NAME,SCORE*100 AS "grade" FROM STUDENT;
---- 정렬 ORDER BY
--SELECT * FROM STUDENT ORDER BY NUM DESC;
--SELECT * FROM STUDENT ORDER BY AGE DESC,NUM ASC;
---- 연결 연산자 ||
--SELECT NAME,SCORE||'점' AS 성적 FROM STUDENT;
---- 중복 데이터 제거 DISTINCT
--SELECT DISTINCT AGE FROM STUDENT;
---- 검색에 많이 활용되는 LIKE
--SELECT NAME FROM STUDENT WHERE NAME LIKE '아%';
--SELECT NAME FROM STUDENT WHERE NAME LIKE '%아%';
--SELECT NAME FROM STUDENT WHERE NAME LIKE '%나';
---- 문자열 관련 함수들
--INSERT INTO STUDENT VALUES(6,'apPLE',5,12,'010-5050-9898');
--SELECT * FROM STUDENT WHERE UPPER(NAME)='APPLE';
-- -- SUBSTR, LENGTH, INSTR, REPLACE, ...
---- IF문을 SQL로 구현
--SELECT NAME, SCORE, CASE WHEN SCORE>=80 THEN 'A' WHEN SCORE>=50 THEN 'B' ELSE 'C' END AS 학점 FROM STUDENT;
---- ★ 다중행 함수
---- COUNT()
--SELECT COUNT(*) FROM STUDENT;
---- UPDATE 테이블명 SET 컬럼명=값,컬럼명=값,... WHERE 컬럼명=타겟컬럼값;
--UPDATE STUDENT SET SCORE=60 WHERE NAME='아리';
--DELETE FROM STUDENT WHERE NUM=6;
---- DCL
-- 계정 생성,삭제
-- 권한에 관련된 명령